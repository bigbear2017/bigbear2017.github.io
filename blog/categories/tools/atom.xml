<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | To Be Your Salt]]></title>
  <link href="http://bigbear2017.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://bigbear2017.github.io/"/>
  <updated>2016-11-02T22:27:48+08:00</updated>
  <id>http://bigbear2017.github.io/</id>
  <author>
    <name><![CDATA[Cao Nannan]]></name>
    <email><![CDATA[sei_michael@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java8新特性之stream]]></title>
    <link href="http://bigbear2017.github.io/blog/2016/07/03/java8xin-te-xing-zhi-stream/"/>
    <updated>2016-07-03T16:44:02+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2016/07/03/java8xin-te-xing-zhi-stream</id>
    <content type="html"><![CDATA[<h4>Stream</h4>

<p>一直都很羡慕scala里面集和的操作，map, reduce, filter，现在我们可以在java中实现了。</p>

<h5>1. 对整数列表进行处理</h5>

<p>比如，有一个整数的list，我们想先过滤掉可以整除2的数，在对每一个数进行平方。</p>

<pre><code>public class IntegerSupplier implements Supplier&lt;Integer&gt; {
  private int value = 0;
  @Override
  public Integer get() {
    return value++;
  }
}

Stream&lt;Integer&gt; stream = Stream.generate(new IntegerSupplier());
stream.limit(100).filter( x-&gt; x % 2 != 0 ).map( x -&gt; x * x ).forEach( x -&gt; System.out.print( x + " "));
</code></pre>

<p>通过Stream的generate函数，我们只要提供一个supplier的类，就可以很容易的得到一个stream的对象。其他collection，比如List也都提供了stream()函数。这样我们就可以很容易地，通过stream来对collection进行访问。</p>

<h5>2. 生成无限大小的list</h5>

<p>利用这个我们还可以生成很多有意思的东西，比如生成一个无限大小的数组。</p>

<pre><code>class NatureSupplier implements Supplier&lt;Long&gt; {
  long value = 0;
  @Override
  public Long get() {
    value += 1;
    return value;
  }
}
Stream&lt;Long&gt; naturalValues = Stream.generate(new NatureSupplier());
naturalValues.map( x -&gt; x * x).limit(100).forEach( x -&gt; System.out.print(x + " ") );
</code></pre>

<p>这里我们将stream的大小限制到了100个，否则的话，他会一直打印下去。</p>

<h5>3. 读取文件内容</h5>

<p>再比如我们要读入一个文件的所有行到一个set里面，如果是之前的话，我们可能需要这样:</p>

<pre><code>BufferedReader reader = new BufferedReader(new FileReader(new File(fileName)));
String line = reader.readLine();
while( line != null ) {
   lineSet.add( line );
   line = reader.readLine();
}
</code></pre>

<p>需要5行代码！这么简单的一件事情，在python里面就一行代码，为什么我需要5行代码呢？现在好一些了，可以这样：</p>

<pre><code>BufferedReader reader = new BufferedReader(new FileReader(new File(fileName)));
reader.lines().forEach(lineSet::add );
</code></pre>

<h5>4. 计算平均数</h5>

<p>之前我们定义了Person这个类(<a href="http://www.bigbear2017.com/blog/2016/07/02/java8xin-te-xing-zhi-lambdabiao-da-shi/">Lambda表达式</a>)，如果我们想计算所有人的年龄的平均数，我们可以直接如下计算：</p>

<pre><code>double average = roster
    .stream()
    .filter(p -&gt; p.getGender() == Person.Sex.MALE)
    .mapToInt(Person::getAge)
    .average()
    .getAsDouble();
</code></pre>

<p>是的，只要一行，我们就可以得到所有人年龄的平均数。类似地，我们还可以计算sum，使用其他reduce function。</p>

<h3>参考资料</h3>

<p><a href="http://docs.oracle.com/javase/tutorial/collections/streams/index.html">streams</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8新特性之Lambda表达式]]></title>
    <link href="http://bigbear2017.github.io/blog/2016/07/02/java8xin-te-xing-zhi-lambdabiao-da-shi/"/>
    <updated>2016-07-02T23:12:12+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2016/07/02/java8xin-te-xing-zhi-lambdabiao-da-shi</id>
    <content type="html"><![CDATA[<p>写久了java，总是给人一种很啰说的感觉。最近使用java 8以后，这个感觉明显变了。Java 8中增加了几个非常有用的特性，像Stream，Lambda表达式，以及函数的引用。这些新的特性，使得java的代码更加紧凑，也更容易理解。更短的代码意味着，我们只要做很少的修改就能完成很多新的问题。</p>

<h4>Lambda 表达式</h4>

<p>Java 的tutorial上给了一个很好的例子， 我们就用这个例子来介绍Lambda表达式吧。</p>

<h5>1. 简单地有一个Person类</h5>

<pre><code>public class Person {

 public enum Sex {
   MALE, FEMALE
 }

 String name;
 LocalDate birthday;
 Sex gender;
 String emailAddress;
 int age;

 public int getAge() {
   return age;
 }

 public void printPerson() {
   System.out.println(toString());
 }

 @Override
 public String toString() {
   return "Name :" + name + " " +
           "Birthday :" + birthday + " " +
           "Gender :" + gender + " " +
           "Email Address :" + emailAddress + " " +
           "Age :" + age;
 }
</code></pre>

<p>这个类很简单，有名字，生日，年龄和email，函数也就是打印而已。</p>

<p>如果我们想打印所有年龄大于一定数值的，可以这么写：</p>

<pre><code>public static void printPersonsOlderThan(List&lt;Person&gt; roster, int age) {
    for (Person p : roster) {
        if (p.getAge() &gt;= age) {
            p.printPerson();
        }
    }
}
</code></pre>

<p>这个函数很好写，但是如果我想改一下要求，打印一定年龄段的所有的人，那么我们就需要改一下。</p>

<h5>2. 稍微再通用化一点</h5>

<pre><code>public static void printPersonsWithinAgeRange(
    List&lt;Person&gt; roster, int low, int high) {
    for (Person p : roster) {
        if (low &lt;= p.getAge() &amp;&amp; p.getAge() &lt; high) {
            p.printPerson();
        }
    }
}
</code></pre>

<p>通过代入参数，我们的函数可以稍微的好了一点。但是呢，这个还是只能操作年龄。如果我们想换一个条件，那么就麻烦了。</p>

<h5>3. 使用Local class</h5>

<p>那么好吧，这个时候我们能想到的是定义一个接口。类似Comparable那种，然后自己去给出具体的实现。</p>

<pre><code>interface CheckPerson {
 boolean test(Person p);
}

class CheckPersonEligibleForSelectiveService implements CheckPerson {
 public boolean test(Person p) {
   return p.gender == Person.Sex.MALE &amp;&amp;
           p.getAge() &gt;= 18 &amp;&amp;
           p.getAge() &lt;= 25;
 }
}

public static void printPersons(List&lt;Person&gt; roster, CheckPerson tester) {
 for (Person p : roster) {
   if (tester.test(p)) {
     p.printPerson();
   }
 }
}
</code></pre>

<h5>4. 使用Anonymous Class</h5>

<p>通过上面的接口，如果我想进一步优化代码的话，那么我们可以使用Anonymous class.</p>

<pre><code>printPersons(
    roster,
    new CheckPerson() {
        public boolean test(Person p) {
            return p.getGender() == Person.Sex.MALE
                &amp;&amp; p.getAge() &gt;= 18
                &amp;&amp; p.getAge() &lt;= 25;
        }
    }
);
</code></pre>

<p>Anonymous Class使我们可以不用再定义类，而是直接重写相应的函数就好了。这个基本上就是Java 8 之前的最好的办法了吧。但是呢，我们发现，我们还是重复地写了很多没有用的code。每一次都要写test的定义，难道编译器就不能帮我们把这个部分infer出来吗？这样我们不是省了很多的事。嗯，接下来就是Lambda表达式出场了。</p>

<h5>5. 使用Lambda表达式</h5>

<pre><code>printPersons(
       roster,
       (Person p) -&gt; p.getGender() == Person.Sex.MALE
               &amp;&amp; p.getAge() &gt;= 18
               &amp;&amp; p.getAge() &lt;= 25
);
</code></pre>

<p>这个就是Lambda表达式啦。我们只要写好函数的主体部分，其他的部分编译器自动的会帮我们做好infer。那我们在什么情况下，才可以使用Lambda表达式呢？CheckPerson是一个functional interface，对于functional interface，我们就可以使用Lambda表达式了。那什么是functional interface呢？就是只有一个abstract method的interface。注意，他是可以有其他的default或者static的方法的。</p>

<h5>6. 使用标准的Functional Interface</h5>

<pre><code>interface Predicate&lt;T&gt; {
    boolean test(T t);
}

public static void printPersonsWithPredicate(
    List&lt;Person&gt; roster, Predicate&lt;Person&gt; tester) {
    for (Person p : roster) {
        if (tester.test(p)) {
            p.printPerson();
        }
    }
}
</code></pre>

<p>像CheckPerson这么简单的functional interface，JDK已经帮我们预先写好了一个，就是Predict接口。在我们使用的时候，可以直接使用Predict就好了。</p>

<h5>7. 写更多的Lambda表达式</h5>

<pre><code>public static void processPersons(
    List&lt;Person&gt; roster,
    Predicate&lt;Person&gt; tester,
    Consumer&lt;Person&gt; block) {
        for (Person p : roster) {
            if (tester.test(p)) {
                block.accept(p);
            }
        }
}
processPersons(
     roster,
     p -&gt; p.getGender() == Person.Sex.MALE
         &amp;&amp; p.getAge() &gt;= 18
         &amp;&amp; p.getAge() &lt;= 25,
     p -&gt; p.printPerson());
</code></pre>

<p>通过上面的方法，我们不仅可以使用printPerson函数，我们甚至可以使用Person中任意一个函数。更进一步，我们先通过map的方式，将Person对象转化成为另外一个string对象。然后再对map的对象进行操作。
<code>
public static void processPersonsWithFunction(
    List&lt;Person&gt; roster,
    Predicate&lt;Person&gt; tester,
    Function&lt;Person, String&gt; mapper,
    Consumer&lt;String&gt; block) {
    for (Person p : roster) {
        if (tester.test(p)) {
            String data = mapper.apply(p);
            block.accept(data);
        }
    }
}
processPersonsWithFunction(
    roster,
    p -&gt; p.getGender() == Person.Sex.MALE
        &amp;&amp; p.getAge() &gt;= 18
        &amp;&amp; p.getAge() &lt;= 25,
    p -&gt; p.getEmailAddress(),
    email -&gt; System.out.println(email)
);
</code></p>

<h5>8.使用泛型编程</h5>

<p>看到上面的定义，我们就会嘀咕，如果我们map出来的对象不是string怎么办？假如我想使用的函数不是println怎么办？那我们是不是又要重写啦？这个时候，我们又想到了泛型编程这个老话题。Lambda表达式+泛型编程，简直完美。
<code>
public static &lt;X, Y&gt; void processElements(
    Iterable&lt;X&gt; source,
    Predicate&lt;X&gt; tester,
    Function &lt;X, Y&gt; mapper,
    Consumer&lt;Y&gt; block) {
    for (X p : source) {
        if (tester.test(p)) {
            Y data = mapper.apply(p);
            block.accept(data);
        }
    }
}
processElements(
    roster,
    p -&gt; p.getGender() == Person.Sex.MALE
        &amp;&amp; p.getAge() &gt;= 18
        &amp;&amp; p.getAge() &lt;= 25,
    p -&gt; p.getEmailAddress(),
    email -&gt; System.out.println(email)
);
</code></p>

<h5>9. 终极完全版</h5>

<p>其实上面的一切都是假的。忘记吧。我们直接使用stream就好了。不过通过上面这样一轮迭代，我们知道了stream到底是如何实现的。这样我们在使用的时候也更加地明白。我相信在我们自己定义的时候，我们也能够定义出更加灵活的Lambda表达式。</p>

<pre><code>roster
    .stream()
    .filter(
        p -&gt; p.getGender() == Person.Sex.MALE
            &amp;&amp; p.getAge() &gt;= 18
            &amp;&amp; p.getAge() &lt;= 25)
    .map(p -&gt; p.getEmailAddress())
    .forEach(email -&gt; System.out.println(email));
</code></pre>

<p>是的，通过就这么一行的代码，我们几乎可以完成之前10行甚至20行代码可以完成的事情。而且，在我们需要有什么改变的时候，重写代码也是非常的方便。如果使用Method inference，上面的代码甚至可以更简单，如下:</p>

<pre><code>roster
    .stream()
    .filter(
        p -&gt; p.getGender() == Person.Sex.MALE
            &amp;&amp; p.getAge() &gt;= 18
            &amp;&amp; p.getAge() &lt;= 25)
    .map(Person::getEmailAddress)
    .forEach(System.out::println);
</code></pre>

<p>总体上来看，Java 8完全是进入到了一个新的台阶，但是还是太慢了，只是在初步阶段。Scala已经都走出去这么远了，Java 8需要更多新的特性。</p>

<h3>参考资料</h3>

<p><a href="http://docs.oracle.com/javase/tutorial/collections/streams/index.html#pipelines">pipelines</a></p>

<p><a href="http://docs.oracle.com/javase/tutorial/collections/streams/index.html">streams</a></p>

<p><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">method references</a></p>

<p><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Lambda Expressions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何写漂亮的JavaDoc]]></title>
    <link href="http://bigbear2017.github.io/blog/2016/06/04/ru-he-xie-piao-liang-de-javadoc/"/>
    <updated>2016-06-04T16:08:14+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2016/06/04/ru-he-xie-piao-liang-de-javadoc</id>
    <content type="html"><![CDATA[<h5>版权声明：本文所有内容都是原创，如有转发请注明出处，谢谢。</h5>

<p>注释在编程中，非常的重要。一个好的注释，是我们有好的编程习惯的基础。JavaDoc很简单，只要稍微注意几个点，我们就可以写出很好看的doc。这样我们的编程能力，至少看起来会好很多。</p>

<h3>一个简单的例子:</h3>

<pre><code>/**
 * Returns an Image object that can then be painted on the screen. 
 * The url argument must specify an absolute {@link URL}. The name
 * argument is a specifier that is relative to the url argument. 
 * &lt;p&gt;
 * This method always returns immediately, whether or not the 
 * image exists. When this applet attempts to draw the image on
 * the screen, the data will be loaded. The graphics primitives 
 * that draw the image will incrementally paint on the screen. 
 *
 * @param  url  an absolute URL giving the base location of the image
 * @param  name the location of the image, relative to the url argument
 * @return      the image at the specified URL
 * @see         Image
 */
 public Image getImage(URL url, String name) {
        try {
            return getImage(new URL(url, name));
        } catch (MalformedURLException e) {
            return null;
        }
 }
</code></pre>

<p>From this <a href="http://www.oracle.com/technetwork/articles/java/index-137868.html">How To Wrte JavaDoc</a>。几个比较重要的点有：</p>

<h3>段落注释</h3>

<p>```
段落分行: <p></p>

<p>列表:</p>

<ul>
  <li> point 1
  <li> point 2
</ul>


<p></p>

<p>分行: <br></p>

<p>插入代码:
Class Usage:</p>

<pre><code> 
 import org.apache.Example
</code></pre>


<pre><code>
### 参数注释
</code></pre>

<p>@author (classes and interfaces only, required)      <br/>
@version (classes and interfaces only, required. <br/>
@param (methods and constructors only)      <br/>
@return (methods only)      <br/>
@exception (@throws is a synonym added in Javadoc 1.2)      <br/>
@see<br/>
@since<br/>
@serial (or @serialField or @serialData)      <br/>
@deprecated
```</p>

<h3>链接注释 用于@SEE</h3>

<pre><code>@see #field 
@see #Constructor(Type, Type...) 
@see #Constructor(Type id, Type id...) 
@see #method(Type, Type,...) 
@see #method(Type id, Type, id...) 
@see Class 
@see Class#field
@see Class#Constructor(Type, Type...) 
@see Class#Constructor(Type id, Type id) 
@see Class#method(Type, Type,...) 
@see Class#method(Type id, Type id,...) 
@see package.Class 
@see package.Class#field 
@see package.Class#Constructor(Type, Type...) 
@see package.Class#Constructor(Type id, Type id) 
@see package.Class#method(Type, Type,...) 
@see package.Class#method(Type id, Type, id) 
@see package 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find 学习笔记]]></title>
    <link href="http://bigbear2017.github.io/blog/2015/12/19/find-xue-xi-bi-ji/"/>
    <updated>2015-12-19T19:30:56+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2015/12/19/find-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h5>版权声明：本文所有内容都是原创，如有转载请注明出处，谢谢。</h5>

<h3>1. 一个简单的find命令，找到当前目录下所有的java文件</h3>

<pre><code>find . -name '*.java'
find . -name '*.java' -print 
</code></pre>

<p>上面两个命令是一样的</p>

<h3>2. find 命令的基本格式:</h3>

<pre><code>find [-H | -L | -P] [-EXdsx] [-f path] path ... [expression]
</code></pre>

<p>其中，E 是使用extended regular expression, d使用depth first search</p>

<h3>3. find 使用多个文件夹</h3>

<pre><code>find dir1 dir2 dir3 -name '*.java' -print
</code></pre>

<h3>4. 删除找到的文件或者是文件夹</h3>

<pre><code>find . -name '*.tmp'
find . -name '*.tmp' -delete
</code></pre>

<p>这个命令是很强大的，不要轻易使用，在使用之前先确认找到的文件都是自己想删除的</p>

<h3>5. 找到深度相对于目前目录是5的所有java文件</h3>

<pre><code>find . -name '*.java' -depth 5
</code></pre>

<h3>6. 寻找深度最多为5层的所有文件</h3>

<pre><code>find . -name '*.java' -maxdepth 5
</code></pre>

<h3>7. 找到所有不是java的文件</h3>

<pre><code>find . -not \( -name '*.java' \) -maxdepth 5
</code></pre>

<p>还可以使用 !, -or, -and, -false, -true</p>

<h3>8. 使用-exec， 执行其他的命令</h3>

<pre><code>find . -name '*.java' -maxdepth 5 -exec ls -lh {} ";"
find . -name '*.java' -maxdepth 5 -exec ls -lh {} \;
</code></pre>

<p>\ 和 &ldquo;&rdquo; 的目的是问了让;不被shell吃掉，而变成一个string成为参数的一部分</p>

<h3>9.  找到所有类型的文件</h3>

<pre><code>find . -type f 普通文件
find . -type d 目录
</code></pre>

<p>s socket, p FIFO, l symbolic link, c character special, b block special</p>

<h3>10. 特别用户名的文件</h3>

<pre><code>find . -uid / find . -user
</code></pre>

<h3>11. 找到当前文件夹中大于1M的文件</h3>

<pre><code>find . -size +1M
find . -size n[ckMGTP] 
</code></pre>

<p>&ldquo;+&rdquo; 表示大于, &ldquo;-&rdquo; 表示小于</p>

<h3>12. 一些关于时间的命令</h3>

<pre><code>find . -atime n[smhdw] -ctime n[smhdw] -mtime n[smhdw]
</code></pre>

<ul>
<li>s       second</li>
<li>m       minute (60 seconds)</li>
<li>h       hour (60 minutes)</li>
<li>d       day (24 hours)</li>
<li>w       week (7 days)</li>
</ul>


<p>好吧暂时先写这么多，很简单的命令，确实很好用。我用的mac系统，有时可能会和Linux有点差别。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何用 Thrift 写一个服务]]></title>
    <link href="http://bigbear2017.github.io/blog/2015/03/21/ru-he-yong-thrift-xie-yi-ge-fu-wu/"/>
    <updated>2015-03-21T21:57:32+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2015/03/21/ru-he-yong-thrift-xie-yi-ge-fu-wu</id>
    <content type="html"><![CDATA[<h5>版权声明：本文所有内容都是原创，如有转载请注明出处，谢谢。</h5>

<!--moreThrift是Facebook开源的一个框架，用来定义数据结构和服务。作为开发者，只要按照格式定义
数据文件，thrift就可以直接生成相应的代码。-->


<h2>什么是Thrift</h2>

<p>Thrift是Facebook开源的软件，据我的理解，Facebook, Google, Amazon，LinkedIn那些家伙总是觉得世界上的轮子都不好用，只有他们的轮子才是最好的。所以他们经常创造一些轮子出来。不过真的承认，他们的轮子真的比其他的好用呢。Thrift就是一个这么好用的轮子。那么，Thrift有什么好处呢？</p>

<ul>
<li>利用Thrift的多语言特性，可以很容易的定义日志格式。这样的日志格式可以在C++语言生成，落地到HDFS，然后再用java语言去访问，简直太方便了。</li>
<li>利用Thrift的服务功能，可以很容易的定义好RPC的接口。然后用C++或者Java实现这个服务，并在服务器上跑起来。其他人不管是用PHP，C++，Java，都可以直接调用这个RPC服务。</li>
</ul>


<p>目前，Thrift支持的语言包括C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml and Delphi和其他语言。</p>

<h2>Thrift语法结构</h2>

<p>Thrift是有自己的语言结构的，按照他的语法结构定义好文件。然后他就能生成相应的源代码。基本类型: bool, byte, i16, i32, i64, double, string，基本上常见的数据类型都有。唯一不支持的数据类型就是float。
所以如果定义浮点类型，则只能定义double类型。在RPC服务中，因为不同机器的关系，浮点类型也不常用。一般情况下，也都是将浮点类型转成整型，保留小数点后N位。</p>

<ul>
<li>容器: list, set, map。</li>
<li>结构：struct，结构的定义类似于C语言。</li>
<li>服务：service, 类似于接口，定义好客户端可以RPC函数。注意Thrift的函数名称是不可以overload的。
也就是说每个函数的名称都必须是唯一的。这个也不是一个什么大的问题。</li>
<li>其他一些功能: typedef, namespace, const, include其他thrift文件，注释等等</li>
</ul>


<h2>实验</h2>

<p>在这个实验中，我们首先定义几个简单的结构体。然后实现服务器端和client端的通信。结构体的定义如下，主要是定义了Tweet这个结构体。
并且定义了Twitter这个服务，他有一个postTweet的方法。用户可以向服务器不断地发送请求，服务器可以把请求记录到日志或者写入数据库。我这里就直接打印出来就好了。
<code>
namespace cpp com.nncao.tweet
namespace java com.nncao.tweet
enum TweetType {
  TWEET,
  RETWEET = 2,
  DM,
  REPLY
}
struct Location {
1: required double latitude;
2: required double longitude;
}
struct Tweet {
1: required i32 userId;
2: required string userName;
3: required string text;
4: optional Location loc;
5: optional TweetType type = TweetType.TWEET;
6: optional string language="english";
}
service Twitter {
bool postTweet( 1:Tweet tweet );
}
</code>
利用这个文件，我们就可以用thrift编译出来C++和Java文件。利用编译出来的文件，我们需要完成服务器端和客户端的实现。这里是实现类，定义了服务端如何处理每个请求。
<code>
package com.nncao.tweet;
/** A class to handle tweets from clients
 * @author Michael Cao
 * @version 2014-06-19
 */
public class TweetImp implements Twitter.Iface {
  @Override
  public boolean postTweet( Tweet tweet ) {
      //you can write this tweet to db or what
      System.out.print( tweet.getUserId() + "\t" );
      System.out.print( tweet.getUserName() + "\t" );
      System.out.print( tweet.getText() + "\n");
      return true;
  }
}
</code>
利用上面的实现类，然后再把服务器定义好。服务器端主要需要定义服务器的类型，传输协议的类型。
<code>
package com.nncao.tweet;
import org.apache.thrift.TProcessor;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.server.TServer;
import org.apache.thrift.server.TThreadPoolServer;
import org.apache.thrift.transport.TServerSocket;
import org.apache.thrift.transport.TTransportException;
/** A class to starts the server and provides service
 * @author Michael Cao
 * @version 2014-06-19
 */
public class TweetServer{
  public static void main( String [] args ) {
        try {
            TServerSocket serverSocket = new TServerSocket( 32586 );
            TProcessor processor = new Twitter.Processor( new TweetImp());
            TThreadPoolServer.Args threadArgs = new TThreadPoolServer.Args(serverSocket);
            TBinaryProtocol.Factory factory = new TBinaryProtocol.Factory();
            threadArgs.processor(processor);
            threadArgs.protocolFactory(factory);
            threadArgs.maxWorkerThreads( 10 );
            TServer server = new TThreadPoolServer( threadArgs );
            System.out.println( "Server is serving ... ");
            server.serve();
        } catch (TTransportException e ) {
            System.out.println("error: " + e);
            System.exit(-1);
        }
  }
}
</code>
这样，服务器端就可以跑起来了。下面是客户端，客户端每次会发10个请求到服务器。如果需要可以判断每个请求是否成功，但在这里，并没有判断。也可以自己定义一些需要的返回值。
<code>
package com.nncao.tweet;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;
/** A client to post tweet to server
 * @author Cao Nannan
 * @version 2014-06-21
 */
public class TweetClient {
    public static void main( String [] args ) {
        try {
            TTransport transport = new TSocket( "localhost", 32586 );
            transport.open();
           for( int i = 0; i &amp;lt; 10; i++ ) {
               TProtocol protocol = new TBinaryProtocol( transport );
               Twitter.Client client = new Twitter.Client(protocol);
               Tweet tweet = new Tweet(i, "nncao", "this is tweet " + i);
               client.postTweet(tweet);
           }
            transport.close();
        } catch ( TTransportException e ) {
            System.out.println( "error: " + e);
            System.exit( -1 );
        } catch ( TException e ) {
            System.out.println( "error: " + e);
            System.exit( -1 );
        }
    }
}
</code>
这样，整个服务就完成了。</p>
]]></content>
  </entry>
  
</feed>
