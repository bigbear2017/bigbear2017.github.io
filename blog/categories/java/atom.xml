<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | To Be Your Salt]]></title>
  <link href="http://bigbear2017.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://bigbear2017.github.io/"/>
  <updated>2016-11-02T22:02:43+08:00</updated>
  <id>http://bigbear2017.github.io/</id>
  <author>
    <name><![CDATA[Cao Nannan]]></name>
    <email><![CDATA[sei_michael@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java8新特性之stream]]></title>
    <link href="http://bigbear2017.github.io/blog/2016/07/03/java8xin-te-xing-zhi-stream/"/>
    <updated>2016-07-03T16:44:02+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2016/07/03/java8xin-te-xing-zhi-stream</id>
    <content type="html"><![CDATA[<h4>Stream</h4>

<p>一直都很羡慕scala里面集和的操作，map, reduce, filter，现在我们可以在java中实现了。</p>

<h5>1. 对整数列表进行处理</h5>

<p>比如，有一个整数的list，我们想先过滤掉可以整除2的数，在对每一个数进行平方。</p>

<pre><code>public class IntegerSupplier implements Supplier&lt;Integer&gt; {
  private int value = 0;
  @Override
  public Integer get() {
    return value++;
  }
}

Stream&lt;Integer&gt; stream = Stream.generate(new IntegerSupplier());
stream.limit(100).filter( x-&gt; x % 2 != 0 ).map( x -&gt; x * x ).forEach( x -&gt; System.out.print( x + " "));
</code></pre>

<p>通过Stream的generate函数，我们只要提供一个supplier的类，就可以很容易的得到一个stream的对象。其他collection，比如List也都提供了stream()函数。这样我们就可以很容易地，通过stream来对collection进行访问。</p>

<h5>2. 生成无限大小的list</h5>

<p>利用这个我们还可以生成很多有意思的东西，比如生成一个无限大小的数组。</p>

<pre><code>class NatureSupplier implements Supplier&lt;Long&gt; {
  long value = 0;
  @Override
  public Long get() {
    value += 1;
    return value;
  }
}
Stream&lt;Long&gt; naturalValues = Stream.generate(new NatureSupplier());
naturalValues.map( x -&gt; x * x).limit(100).forEach( x -&gt; System.out.print(x + " ") );
</code></pre>

<p>这里我们将stream的大小限制到了100个，否则的话，他会一直打印下去。</p>

<h5>3. 读取文件内容</h5>

<p>再比如我们要读入一个文件的所有行到一个set里面，如果是之前的话，我们可能需要这样:</p>

<pre><code>BufferedReader reader = new BufferedReader(new FileReader(new File(fileName)));
String line = reader.readLine();
while( line != null ) {
   lineSet.add( line );
   line = reader.readLine();
}
</code></pre>

<p>需要5行代码！这么简单的一件事情，在python里面就一行代码，为什么我需要5行代码呢？现在好一些了，可以这样：</p>

<pre><code>BufferedReader reader = new BufferedReader(new FileReader(new File(fileName)));
reader.lines().forEach(lineSet::add );
</code></pre>

<h5>4. 计算平均数</h5>

<p>之前我们定义了Person这个类(<a href="http://www.bigbear2017.com/blog/2016/07/02/java8xin-te-xing-zhi-lambdabiao-da-shi/">Lambda表达式</a>)，如果我们想计算所有人的年龄的平均数，我们可以直接如下计算：</p>

<pre><code>double average = roster
    .stream()
    .filter(p -&gt; p.getGender() == Person.Sex.MALE)
    .mapToInt(Person::getAge)
    .average()
    .getAsDouble();
</code></pre>

<p>是的，只要一行，我们就可以得到所有人年龄的平均数。类似地，我们还可以计算sum，使用其他reduce function。</p>

<h3>参考资料</h3>

<p><a href="http://docs.oracle.com/javase/tutorial/collections/streams/index.html">streams</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8新特性之Lambda表达式]]></title>
    <link href="http://bigbear2017.github.io/blog/2016/07/02/java8xin-te-xing-zhi-lambdabiao-da-shi/"/>
    <updated>2016-07-02T23:12:12+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2016/07/02/java8xin-te-xing-zhi-lambdabiao-da-shi</id>
    <content type="html"><![CDATA[<p>写久了java，总是给人一种很啰说的感觉。最近使用java 8以后，这个感觉明显变了。Java 8中增加了几个非常有用的特性，像Stream，Lambda表达式，以及函数的引用。这些新的特性，使得java的代码更加紧凑，也更容易理解。更短的代码意味着，我们只要做很少的修改就能完成很多新的问题。</p>

<h4>Lambda 表达式</h4>

<p>Java 的tutorial上给了一个很好的例子， 我们就用这个例子来介绍Lambda表达式吧。</p>

<h5>1. 简单地有一个Person类</h5>

<pre><code>public class Person {

 public enum Sex {
   MALE, FEMALE
 }

 String name;
 LocalDate birthday;
 Sex gender;
 String emailAddress;
 int age;

 public int getAge() {
   return age;
 }

 public void printPerson() {
   System.out.println(toString());
 }

 @Override
 public String toString() {
   return "Name :" + name + " " +
           "Birthday :" + birthday + " " +
           "Gender :" + gender + " " +
           "Email Address :" + emailAddress + " " +
           "Age :" + age;
 }
</code></pre>

<p>这个类很简单，有名字，生日，年龄和email，函数也就是打印而已。</p>

<p>如果我们想打印所有年龄大于一定数值的，可以这么写：</p>

<pre><code>public static void printPersonsOlderThan(List&lt;Person&gt; roster, int age) {
    for (Person p : roster) {
        if (p.getAge() &gt;= age) {
            p.printPerson();
        }
    }
}
</code></pre>

<p>这个函数很好写，但是如果我想改一下要求，打印一定年龄段的所有的人，那么我们就需要改一下。</p>

<h5>2. 稍微再通用化一点</h5>

<pre><code>public static void printPersonsWithinAgeRange(
    List&lt;Person&gt; roster, int low, int high) {
    for (Person p : roster) {
        if (low &lt;= p.getAge() &amp;&amp; p.getAge() &lt; high) {
            p.printPerson();
        }
    }
}
</code></pre>

<p>通过代入参数，我们的函数可以稍微的好了一点。但是呢，这个还是只能操作年龄。如果我们想换一个条件，那么就麻烦了。</p>

<h5>3. 使用Local class</h5>

<p>那么好吧，这个时候我们能想到的是定义一个接口。类似Comparable那种，然后自己去给出具体的实现。</p>

<pre><code>interface CheckPerson {
 boolean test(Person p);
}

class CheckPersonEligibleForSelectiveService implements CheckPerson {
 public boolean test(Person p) {
   return p.gender == Person.Sex.MALE &amp;&amp;
           p.getAge() &gt;= 18 &amp;&amp;
           p.getAge() &lt;= 25;
 }
}

public static void printPersons(List&lt;Person&gt; roster, CheckPerson tester) {
 for (Person p : roster) {
   if (tester.test(p)) {
     p.printPerson();
   }
 }
}
</code></pre>

<h5>4. 使用Anonymous Class</h5>

<p>通过上面的接口，如果我想进一步优化代码的话，那么我们可以使用Anonymous class.</p>

<pre><code>printPersons(
    roster,
    new CheckPerson() {
        public boolean test(Person p) {
            return p.getGender() == Person.Sex.MALE
                &amp;&amp; p.getAge() &gt;= 18
                &amp;&amp; p.getAge() &lt;= 25;
        }
    }
);
</code></pre>

<p>Anonymous Class使我们可以不用再定义类，而是直接重写相应的函数就好了。这个基本上就是Java 8 之前的最好的办法了吧。但是呢，我们发现，我们还是重复地写了很多没有用的code。每一次都要写test的定义，难道编译器就不能帮我们把这个部分infer出来吗？这样我们不是省了很多的事。嗯，接下来就是Lambda表达式出场了。</p>

<h5>5. 使用Lambda表达式</h5>

<pre><code>printPersons(
       roster,
       (Person p) -&gt; p.getGender() == Person.Sex.MALE
               &amp;&amp; p.getAge() &gt;= 18
               &amp;&amp; p.getAge() &lt;= 25
);
</code></pre>

<p>这个就是Lambda表达式啦。我们只要写好函数的主体部分，其他的部分编译器自动的会帮我们做好infer。那我们在什么情况下，才可以使用Lambda表达式呢？CheckPerson是一个functional interface，对于functional interface，我们就可以使用Lambda表达式了。那什么是functional interface呢？就是只有一个abstract method的interface。注意，他是可以有其他的default或者static的方法的。</p>

<h5>6. 使用标准的Functional Interface</h5>

<pre><code>interface Predicate&lt;T&gt; {
    boolean test(T t);
}

public static void printPersonsWithPredicate(
    List&lt;Person&gt; roster, Predicate&lt;Person&gt; tester) {
    for (Person p : roster) {
        if (tester.test(p)) {
            p.printPerson();
        }
    }
}
</code></pre>

<p>像CheckPerson这么简单的functional interface，JDK已经帮我们预先写好了一个，就是Predict接口。在我们使用的时候，可以直接使用Predict就好了。</p>

<h5>7. 写更多的Lambda表达式</h5>

<pre><code>public static void processPersons(
    List&lt;Person&gt; roster,
    Predicate&lt;Person&gt; tester,
    Consumer&lt;Person&gt; block) {
        for (Person p : roster) {
            if (tester.test(p)) {
                block.accept(p);
            }
        }
}
processPersons(
     roster,
     p -&gt; p.getGender() == Person.Sex.MALE
         &amp;&amp; p.getAge() &gt;= 18
         &amp;&amp; p.getAge() &lt;= 25,
     p -&gt; p.printPerson());
</code></pre>

<p>通过上面的方法，我们不仅可以使用printPerson函数，我们甚至可以使用Person中任意一个函数。更进一步，我们先通过map的方式，将Person对象转化成为另外一个string对象。然后再对map的对象进行操作。
<code>
public static void processPersonsWithFunction(
    List&lt;Person&gt; roster,
    Predicate&lt;Person&gt; tester,
    Function&lt;Person, String&gt; mapper,
    Consumer&lt;String&gt; block) {
    for (Person p : roster) {
        if (tester.test(p)) {
            String data = mapper.apply(p);
            block.accept(data);
        }
    }
}
processPersonsWithFunction(
    roster,
    p -&gt; p.getGender() == Person.Sex.MALE
        &amp;&amp; p.getAge() &gt;= 18
        &amp;&amp; p.getAge() &lt;= 25,
    p -&gt; p.getEmailAddress(),
    email -&gt; System.out.println(email)
);
</code></p>

<h5>8.使用泛型编程</h5>

<p>看到上面的定义，我们就会嘀咕，如果我们map出来的对象不是string怎么办？假如我想使用的函数不是println怎么办？那我们是不是又要重写啦？这个时候，我们又想到了泛型编程这个老话题。Lambda表达式+泛型编程，简直完美。
<code>
public static &lt;X, Y&gt; void processElements(
    Iterable&lt;X&gt; source,
    Predicate&lt;X&gt; tester,
    Function &lt;X, Y&gt; mapper,
    Consumer&lt;Y&gt; block) {
    for (X p : source) {
        if (tester.test(p)) {
            Y data = mapper.apply(p);
            block.accept(data);
        }
    }
}
processElements(
    roster,
    p -&gt; p.getGender() == Person.Sex.MALE
        &amp;&amp; p.getAge() &gt;= 18
        &amp;&amp; p.getAge() &lt;= 25,
    p -&gt; p.getEmailAddress(),
    email -&gt; System.out.println(email)
);
</code></p>

<h5>9. 终极完全版</h5>

<p>其实上面的一切都是假的。忘记吧。我们直接使用stream就好了。不过通过上面这样一轮迭代，我们知道了stream到底是如何实现的。这样我们在使用的时候也更加地明白。我相信在我们自己定义的时候，我们也能够定义出更加灵活的Lambda表达式。</p>

<pre><code>roster
    .stream()
    .filter(
        p -&gt; p.getGender() == Person.Sex.MALE
            &amp;&amp; p.getAge() &gt;= 18
            &amp;&amp; p.getAge() &lt;= 25)
    .map(p -&gt; p.getEmailAddress())
    .forEach(email -&gt; System.out.println(email));
</code></pre>

<p>是的，通过就这么一行的代码，我们几乎可以完成之前10行甚至20行代码可以完成的事情。而且，在我们需要有什么改变的时候，重写代码也是非常的方便。如果使用Method inference，上面的代码甚至可以更简单，如下:</p>

<pre><code>roster
    .stream()
    .filter(
        p -&gt; p.getGender() == Person.Sex.MALE
            &amp;&amp; p.getAge() &gt;= 18
            &amp;&amp; p.getAge() &lt;= 25)
    .map(Person::getEmailAddress)
    .forEach(System.out::println);
</code></pre>

<p>总体上来看，Java 8完全是进入到了一个新的台阶，但是还是太慢了，只是在初步阶段。Scala已经都走出去这么远了，Java 8需要更多新的特性。</p>

<h3>参考资料</h3>

<p><a href="http://docs.oracle.com/javase/tutorial/collections/streams/index.html#pipelines">pipelines</a></p>

<p><a href="http://docs.oracle.com/javase/tutorial/collections/streams/index.html">streams</a></p>

<p><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">method references</a></p>

<p><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Lambda Expressions</a></p>
]]></content>
  </entry>
  
</feed>
