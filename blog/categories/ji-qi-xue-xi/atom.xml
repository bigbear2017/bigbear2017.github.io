<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 机器学习 | To Be Your Salt]]></title>
  <link href="http://bigbear2017.github.io/blog/categories/ji-qi-xue-xi/atom.xml" rel="self"/>
  <link href="http://bigbear2017.github.io/"/>
  <updated>2016-06-05T20:07:54+08:00</updated>
  <id>http://bigbear2017.github.io/</id>
  <author>
    <name><![CDATA[Cao Nannan]]></name>
    <email><![CDATA[sei_michael@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GradientBoosting算法介绍]]></title>
    <link href="http://bigbear2017.github.io/blog/2015/11/24/gradientboostingsuan-fa-jie-shao/"/>
    <updated>2015-11-24T23:45:10+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2015/11/24/gradientboostingsuan-fa-jie-shao</id>
    <content type="html"><![CDATA[<h5>版权声明：本文所有内容都是原创，如有转载请注明出处，谢谢。</h5>

<h3>算法介绍</h3>

<p>由AdaBoosting算法，我们知道了什么是Boosting算法，算法大概的结构如下:</p>

<p>$$ G(x) = \sum_{i = 1}^{M} \alpha_i g_i( x ) $$</p>

<p>其中$g_i(x)$是弱分类器，$\alpha_i$是每个分类器的权重。在每一步中，AdaBoosting利用那些被分错类的点，然后增加权重，重新训练一个新的分类器，并且计算分类器的权重。
那什么是Gradient Boosting呢？类似于AdaBoosting, Gradient Boosting也是一种Boosting的算法，结构和上面一样。只是Gradient Boosting是利用Gradient来重新训练一个新的分类器，然后计算权重。</p>

<h3>算法理解</h3>

<h5>1. 简单的Boosting</h5>

<p>如果我们只有一个简单的分类器$g(x)$，不用AdaBoosting，如何进行Boosting呢？
可能最简单的是用Residual来进行训练，过程如下:</p>

<blockquote><p>for j = 1 to M</p>

<ul>
<li><p>$ r_{ji} = ( y_i - G_{j-1}(x_i) ) $ //r_j should be a vector, size of N</p></li>
<li><p>fit $g_j(x)$ to $r_j$</p></li>
<li><p>$\alpha_j = \arg \min_{\alpha} \sum_{i = 1}^n L( y_i, G_{j-1} ( x_i ) + \alpha * g_j(x_i) )  $</p></li>
<li><p>$G_j(x) = G_{j-1}(x) + \alpha_j g_j(x) $</p></li>
</ul>
</blockquote>

<h5>2. 使用Gradient</h5>

<p>上面的每一步，我们使用了一个Residual $(y_i - G_{j-1}(x_i) )$ 来重新训练模型。这个表面上看是挺好的，每一次我们都在逼近$y$。但实际上，我们真的在减少Loss吗？假设我们使用Squared Error作为Loss. 那么: $L=  \sum_{i=1}^N ( y_i - \sum_{j=1}^M g_j(x_i) )^2$ 。这个是不是让我们想到Least Squared Regression呢？里面的$\beta$是如何更新的呢？因为是minimize loss，所以，我们是每次加上负梯度，更新如下:
$\beta_{j+1} = \beta_{j} - \frac{\partial L}{\partial \beta }$</p>

<p>看到这个，是不是我们好像似乎明白了什么。假如，我们把每一个$g_i(x)$都看成变量，如果我们想$G(x)$更接近$y$，那我们应该如何更新呢？
$G(x) = G (x) - \frac{\partial L}{\partial G(x)}$
从这个角度，我们再来理解$y_i - G_j(x_i)$的话，就可以知道它其实就是$L = (y - G(x))^2$的负梯度($-\frac{\partial L} {\partial G(x)} = - ( y - G(x) ) * -1 = y - G(x) $).</p>

<h4>其他梯度</h4>

<h5>1. Absolute Loss</h5>

<p>Absolute loss的定义如下:</p>

<p>$$ L(y, G) = |y - G|$$</p>

<p>梯度如下:
$$ \frac{\partial L}{\partial G} =
\begin{cases}
y - G(x) &amp; if y \ge G(x) \\\
G(x) - y &amp; otherwise
\end{cases} $$</p>

<h5>2. Huber Loss</h5>

<p>$$ L_\delta(y, f(x)) =
\begin{cases}
 \frac{1}{2}(y - f(x))^2                   &amp; \textrm{for} |y - f(x)| \le \delta, \\\
 \delta\, |y - f(x)| - \frac{1}{2}\delta^2 &amp; \textrm{otherwise.}
\end{cases} $$</p>

<p>所以
$$
\frac{\partial L_\delta(y, G(x))} {\partial G} = \begin{cases}
y - G(x)                 &amp; \textrm{for} |y - G(x)| \le \delta, \\\
 \delta sign( y - f(x) )  &amp; \textrm{otherwise.}
\end{cases} $$</p>

<h4>算法过程</h4>

<blockquote><p>Input: training set ${(x_i, y_i)_{i=1}^n}$</p>

<p>初始化learner function $G_0$为常数</p>

<p>for j = 1 to M</p>

<p> &lsquo;  &rsquo;  $ r_{ji} = -\frac{\partial L} {\partial G_{j-1}(x_i)} $ //$r_j$ should be a vector, size of N</p>

<p> &lsquo;  &rsquo;  fit $g_j(x)$ to $r_j$</p>

<p> &lsquo;  &rsquo;  $\alpha_j = \arg \min_{\alpha} \sum_{i = 1}^n L( y_i, G_{j-1} ( x_i ) + \alpha * g_j(x_i) )  $</p>

<p> &lsquo;  &rsquo;  $G_j(x) = G_{j-1}(x) + \alpha_j g_j(x) $</p></blockquote>

<p>初始化learner function $F_0$为常数
计算negative gradient
以negative gradient为目标进行训练得到一个简单的learner
找到最优的常数得到新的更强的learner</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AdaBoosting算法介绍]]></title>
    <link href="http://bigbear2017.github.io/blog/2015/09/27/adaboostingsuan-fa-jie-shao/"/>
    <updated>2015-09-27T21:41:04+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2015/09/27/adaboostingsuan-fa-jie-shao</id>
    <content type="html"><![CDATA[<h5>版权声明：本文所有内容都是原创，如有转载请注明出处，谢谢。</h5>

<p>Boosting 是一种很有意思的算法。在没有SVM之前，今天就让我们来一同回顾一下这个经典的算法吧。</p>

<h2>1. 模型定义</h2>

<p>假设模型的输入为$X \in R^p$，输出为$ Y \in (-1, 1)$，输入和输出都有N个点。我们手上呢，有一个很简单的classfier，$G(x)$，他实在不怎么样，可能就比随机猜要好一点点。我们如何利用这个简单的分类器，对数据进行很好的分类呢？AdaBoosting就提出一种很好的办法: 将弱的分类器组合起来，然后我们形成一个强的分类器。这个想法很好，但是我们真的可以把分类器组合起来吗？首先怎么把分类器组合起来呢？直接用余数来训练吗？这样组合起来，分类器变的更糟糕，怎么办？AdaBoosting巧妙地利用了每一个分类器的优点，并且组合了起来。结果也是相当地惊人，在它刚刚被提出来的时候，几乎是当时最好的算法。首先，组合分类器的定义如下:</p>

<p>$$ G(x) = sign ( \sum_{i =1 }^{M} \alpha_m G_m(x)) $$</p>

<p>那如何得到每一个弱分类器的权重呢？AdaBoosting 是利用了每个分类器的错误率来进行组合的，每一次用$G(x)$来分类的错误率就定义如下:</p>

<p>$$ E = \frac{1}{N} \sum_{i=1}^{N} I(y_i \ne G(x_i)$$</p>

<h2>2.模型训练</h2>

<p>Algorithm AdaBoost</p>

<blockquote><ol>
<li>Initialize  $ \omega_i = \frac{1}{N} $,  i = 1, 2, &hellip; N</li>
<li>For m = 1 to M:</li>
<li>(a) Fit a classifier G(x) to training data using weights $\omega_i$</li>
<li>(b)Compute</li>
<li>$$ err_m = \frac{\sum_{i=1}^{N} \omega_m I( y_i \ne G_m(x))} {\sum_{i = 1}^{N} \omega_i}  $$</li>
<li>&copy; Compute $ \alpha_m = \log(\frac{( 1 - err_m)} {err_m} ) $</li>
<li>(d) Update $\omega_i  = \omega_i \exp(\alpha_m I( y_i \ne G_m(x_i) )$</li>
<li>Output  $ G(x) = sign[ \sum_{m=1}^{M} \alpha_m G_m(x) ] $</li>
</ol>
</blockquote>

<h2>3. 算法解读</h2>

<ol>
<li>为什么 $\alpha_m$定义是 $\log(\frac{( 1 - err_m)} {err_m} )$ ?</li>
</ol>


<p>首先$err_m$的取值范围是$(0, 1)$。如果分类器$G_m(x)$的错误率越高，那么$err_m$就越接近于1, 否则就越接近于$0$。而根据常识来说，如果一个分类器很差劲，错误率越高呢，我们就希望他的权重就越低，越接近于0。而这样的话，就让我们想到了一个很常见的函数sigmod fuction。就让我们来证明这个来历吧。</p>

<p>$$ \begin{matrix}
err_m =  \frac{1}{1 + \exp^{\alpha}} \\
=> 1 + \exp^{\alpha} = \frac{1}{err_m} \\
=> \exp^{\alpha} = \frac{1}{err_m} - 1 \\
=> \alpha = \log(\frac{( 1 - err_m)} {err_m} )
\end{matrix} $$</p>

<p>上面并不是logistic function(lf)，而是一个按照y轴对称的lf，因为如果直接用lf的话，err越大，权重也会越大了。</p>

<ol>
<li>为什么每次要更新$\omega_i$ ?
对于 $\omega_i$ 的更新，我们可以进行这样的解读:

<blockquote><p>if $y_i == G(x_i)$ $\omega_i == \omega_i$
else $\omega_i = \omega_i * \frac{1- err_m}{err_m}$</p></blockquote></li>
</ol>


<p>对于 $\frac{1- err_m}{err_m}$，我们知道$err_m$越大，值越小。也就是说，错误率越高，我们的就权重越低。这是可以理解的，如果$err_m$很大，说明分类器不好。被这样一个分类器给分错了，那我们可能觉得没关系。但是如果$err_m$很小，说明分类器很好，被一个很好的分类器分错了，说明这个点，我们希望在下次的时候，可以被其他的分类器补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AUC-COPC指标介绍]]></title>
    <link href="http://bigbear2017.github.io/blog/2015/07/24/auc-copczhi-biao-jie-shao/"/>
    <updated>2015-07-24T20:56:45+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2015/07/24/auc-copczhi-biao-jie-shao</id>
    <content type="html"><![CDATA[<h5>版权声明：本文所有内容都是原创，如有转载请注明出处，谢谢。</h5>

<h3>AUC</h3>

<p>AUC 的全称是Area Under Curve，简单的来说就是<strong><em>计算某条线以下的面积</em></strong>。说起AUC，就不得不说ROC（Receiver Operating Characteristic）曲线。计算ROC曲线，我们需要知道两个名词：true positive rate 和 false positive rate。这两个值的计算很简单，比如有10个样本，有7个是正例，3个是负例。那当我们假设都是positive的时候，tpr是0.7，fpr是0.3。那如何计算AUC呢？</p>

<ol>
<li><p>将所有的预估值从大到小进行排序</p></li>
<li><p>将所有的值划分成n个等分</p></li>
<li><p>假设当前的等分点是p, 所有大于p的都看成正例，所有小于p的都看成负例。按照这个规则，计算每个等分之前的tpr和fpr</p></li>
<li><p>把每个等分当成是平的，积分算面积</p></li>
</ol>


<h4>举个例子</h4>

<p>假如有20个样本, 把样本的预测值从大到小排序，如下图:</p>

<p><img src="http://7xv0xu.com1.z0.glb.clouddn.com/auc1.jpg" alt="sortP" /></p>

<p>那么我们把上面划分成20等分，计算每一个等分上的TPR和FPR，然后画出下面的图:</p>

<p><img src="http://7xv0xu.com1.z0.glb.clouddn.com/auc2.jpg" alt="imageP" /></p>

<p>这样我们就可以计算 AUC = 0.1 x 0.2 + 0.2 x 0.5 + 0.1 x 0.6 + 0.1 x 0.7 + 0.3 x 0.8 + 0.1 * 0.9 + 0.1 * 1 = 0.02 + 0.1 + 0.06 + 0.07 + 0.24 + 0.09 + 0.1 = 0.68</p>

<h4>AUC 的意义</h4>

<p>​从上面的图来看，如果auc大，就表示说，我们能很容易的区分正例和负例。但是对于正例和负例，具体的值，我们是不能够确定的。只能够差不多知道，它是正例，另外是负例。所以AUC，比较适合在分类的场景中，而不适合在回归的场景中。但这不表示AUC在回归的场景中，就不重要。在回归的场景中，我们仍然能够部分地看出模型的状况。</p>

<h3>COPC</h3>

<p>这个主要是用来衡量模型是否收敛，就不多说了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NeronNetwork算法介绍]]></title>
    <link href="http://bigbear2017.github.io/blog/2015/06/22/neronnetworksuan-fa-jie-shao/"/>
    <updated>2015-06-22T20:05:00+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2015/06/22/neronnetworksuan-fa-jie-shao</id>
    <content type="html"><![CDATA[<h5>版权声明：本文所有内容都是原创，如有转载请注明出处，谢谢。</h5>

<p>最近深度学习实在太火了，火到各个公司都在搞实验室。但是深度学习的基础，还是从neron network，BP，这样的算法开始。
就简单回顾一下最简单的NN吧。</p>

<h3>1. 算法介绍</h3>

<p>我们假设只有一层的隐藏层，并且大小为M，输入$X \in R^p$，输出$Y \in R^K$，输出$Y$属于$K$ classes。所以，我们可以得到下面的定义:</p>

<p>$$ \begin{matrix}
D_m = \rho ( \alpha_m0 + \alpha_m^T X ) , m = 1, 2, &hellip; M \\
T_k = \beta_k0 + \beta_k^T D, k = 1, 2, &hellip; K \\
f_k(X) = g_k( T ) , k = 1,2, &hellip; K
\end{matrix}$$</p>

<p>其中$D = (D_1, D_2, &hellip; , D_M)$, $\rho = \frac{1}{ 1 + \exp^{(-v)} }$是sigmod function, $g_k$可以是identity function，或者是softmax function $\frac{exp^{T_k}}{\sum_{l = 1}^{K} exp^{T_l}}$.</p>

<h3>2. 求解</h3>

<p>训练采用的back propagation的方式，就是先利用参数计算结果，然后根据结果计算梯度，根据梯度再优化参数。
根据上面的定义，我们可以得到loss function $R(\alpha, \beta)$如下:</p>

<p>$$
R(\alpha, \beta) = \sum_{k = 1}^K \sum_{n = 1}^N ( y_{ik} - f_k( x_i ) ) ^2
$$</p>

<p>其中$N$是样本数, $K$是样本的class的数目. 所以对$\alpha, \beta$分别求偏导，我们可以得到:</p>

<p>$$\begin{matrix}
\frac{\partial R_i}{\partial \beta_{km} } = -2(y_{ik} - f_k( x_i ) ) g^{\prime}(T_k) D_{mi}   \\
\frac{\partial R_i}{\partial \alpha_{mp}} =  -\sum_{k=1}^{K}2(y_{ik} - f_k( x_i ) ) g^{\prime}(T_k) \beta_{k}\rho^{\prime}(\alpha_m^T x_i) x_{ip}
\end{matrix}
$$</p>

<p>根据上面的式子，我们就可以利用gradient descent的方式，来训练模型了.</p>

<p>$$ \begin{matrix}
\beta^{r+1}_{km} = \beta^{r}_{km}  - \gamma_r \frac{\partial R_i}{\partial \beta_{km} } \\
\alpha^{r+1}_{mp} = \alpha^{r}_{mp}  - \gamma_r \frac{\partial R_i}{\partial \beta_{mp} }
\end{matrix}$$</p>

<h3>3. 向量化</h3>

<p>上面的式子，实在看着太繁琐了，我们还是对其进行向量化，可能看着更简单，实现也更方便一些.
待续</p>

<h3>4. 注意点</h3>

<h4>1. 输入的起始点，不可以全部是零。因为全部是零的话，就永远全部是零，无法训练。也不可以过大，结果会不太好。最好的是随机靠近0的数。</h4>

<h4>2. 隐藏层多一点比较好，可以表达的非线性的能力就越强一点</h4>

<h4>3. 加正则防止过拟合。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVM算法介绍]]></title>
    <link href="http://bigbear2017.github.io/blog/2015/05/22/svmjian-dan-jie-shao/"/>
    <updated>2015-05-22T19:35:43+08:00</updated>
    <id>http://bigbear2017.github.io/blog/2015/05/22/svmjian-dan-jie-shao</id>
    <content type="html"><![CDATA[<h5>版权声明：本文所有内容都是原创，如有转载请注明出处，谢谢。</h5>

<p>在没有深度学习之前，SVM非常火。最近似乎很少有人再用svm了，不过还是让我们来回顾一下这个经典的算法吧。</p>

<h3>1. Perceptron</h3>

<p>说到svm，我们可以先从最简单的perceptron说起。Percetron是最简单的一种分类器。给n个点(X, Y), 假设
$X \in R^p, Y \in (0, 1)$，如何得到一个分类器$f(x) = \beta * x + \beta_0$，使得所有被错误分类的点，到分类线的距离最小。我们希望说，如果被错误分类了，也不要错的太厉害。这样的话，我们就可以得到下面的式子:</p>

<p>$$
D( \beta, \beta_0 ) = - \sum_{i} y_i( \beta x_i + \beta_0 )
$$</p>

<p>根据gradient decent，随机初始化一个$\beta$，然后每次更新$\beta$如下：</p>

<p>$$ (\beta, \beta_0 )_{n+1}= ( \beta, \beta_0 )_n + \rho * (y_i x_i, y_i )$$</p>

<p>在扫描几遍数据之后，我们得到一个稳定的$\beta, \beta_0$就可以了。</p>

<h3>2. Best Seperating Hyperplane</h3>

<p>在上面求解的过程中，我们会发现，每次得到的解都是不一样的。随着初始化，数据的输入，都会发生变化。那怎么才是最好的seperating hyperplane呢？SVM提出了一个观点，任何一个类中的点到分类线的距离都是最大的，这个就是最好的。
所以从上面，我们可以得到:</p>

<p>$$
\begin{matrix}<br/>
\max_{\beta  \ \ \beta_0 } M  \\
subject \ \ to \ \ \frac{y_i ( \beta x_i + \beta_0  )} {||\beta||} \ge M
\end{matrix}<br/>
$$</p>

<p>从上面的式子，我们知道，对于 $ || \beta || $，我们取任何值，它都不会影响点到线的距离，因为我们已经做了归一化了.那么我们就取$ || \beta || = \frac{1}{M} $ 好了, 这样我们可以得到:</p>

<p>$$
\begin{matrix}<br/>
\max_{\beta  \ \ \beta_0 }  \frac{1}{ ||\beta || } \\
subject \ \ to \ \ y_i ( \beta x_i + \beta_0  ) \ge 1
\end{matrix}<br/>
$$</p>

<p>稍微转化一下，我们可以得到下面的式子:
$$
\begin{matrix}<br/>
\min_{\beta  \ \ \beta_0 }  \frac{1}{2}{ ||\beta ||^2 } \\
subject \ \ to \ \ y_i ( \beta x_i + \beta_0  ) \ge 1
\end{matrix}<br/>
$$</p>

<p>这样的话，我们就可以对上面的式子进行求解了，根据拉格朗日算法，我们可以得到:</p>

<p>$$
L_P = \frac{1}{2}{ ||\beta ||^2 } - \sum_{ i = i}^{n} \alpha_i [ y_i ( \beta x_i + \beta_0  ) - 1 ]
$$</p>

<p>对$\beta, \beta_0$，分别求偏导，我们可以得到:</p>

<p>$$
\begin{matrix}
\frac{\partial L_P} {\partial \beta } = \beta - \sum_{i = 1}^{n} \alpha_i y_i x_i = 0 \\
\frac{\partial L_P} {\partial \beta_0 } = \sum_{i=1}^{n} \alpha_i y_i = 0
\end{matrix}<br/>
$$</p>

<p>代入原来的式子，我们可以得到一个dual的形式:</p>

<p>$$
\begin{matrix}
L_D =  \sum_{i = 1}^{n} \alpha_i - \frac{1}{2} \sum_{i=1}^{n} \sum_{j=1}^{n} \alpha_i \alpha_j y_i y_j x_i^T x_j
\\
subject \ \ to \ \ \alpha_i \ge 0 \ and \ \sum_{i=1}^{n} \alpha_i y_i  = 0
\end{matrix}
$$</p>

<p>从上面的式子，我们可以看到：</p>

<ol>
<li>如果$\alpha_i >0 $，那么$y_i (\beta x_i + \beta_0) = 1$，那么点就在边界上面</li>
<li>如果$\alpha_i = 0 $，那么点不在边界上面</li>
</ol>


<h3>3. 如何求解</h3>

<p>经过上面的变换，我们可以得到一个dual，然后使用 SMO 算法，或者其他算法我们都可以得到解。但是都是比较麻烦的。我们可不可以像其他算法一样，使用最简单的Gradient Descent 来求解呢？如果可以的话，那样会简单很多。(待续)</p>
]]></content>
  </entry>
  
</feed>
